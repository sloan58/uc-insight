<?xml version="1.0" encoding="UTF-8" ?>
<dt-button library="Buttons">
	<name>excelFlash</name>
	<summary>Create and save an Excel XLSX file that contains the data from the table (Adobe Flash)</summary>
	<since>1.0.0</since>

	<requires>
		* Buttons' _Flash export button_ plug-in.
		* Adobe Flash
	</requires>

	<description>
		This button provides the end user with the ability to save the table's data into a locally created Excel XLSX file.

		Please note that this button has a number of restrictions:

		* Adobe Flash must be installed.
		* The action for this button _cannot_ be activated using the `b-api button().trigger()` or key combination methods due to the security restrictions of Flash
		* The created file save dialogue must be shown and the file cannot be automatically opened.
		* The XLSX file cannot contain any styling information. Only the raw data from the table is included.
		
		The `b-button excelHtml5` method provides much greater flexibility and thus button is considered to be sunsetted, but is still provided for use with older browsers that do not support the APIs required for the `b-button excelHtml5` button type.

		[Adobe Flash](https://get.adobe.com/flashplayer/) is required for this button to operate. If Flash is not installed, or disabled, in the end user's browser this button will not appear. For a non-Flash alternative please see the `b-button excelHtml5` button type. Additionally the `b-button excel` will automatically select between this button and `b-button excelHtml5` depending on the features of the browser.
	</description>


	<option type="string" name="text" default="Excel">
		The button's display text. The text can be configured using this option (see `b-init buttons.buttons.text`) or the `buttons.copy` option of the DataTables `dt-init language` object.
	</option>

	<option type="string" name="className" default="buttons-excel buttons-flash">
		The button's class name. See `b-init buttons.buttons.className` for details.
	</option>

	<option type="function" name="action">
		Create and save a Excel XLSX file.
	</option>

	<option type="string" name="fieldSeparator" default=",">
		The character(s) used to separate fields in the plain text representation of the table that is copied to the system's clipboard.		
	</option>

	<option type="string" name="fieldBoundary" default='"'>
		The character(s) used to enclose each field in the plain text representation of the table that is copied to the system's clipboard. This is automatically added at the start and end of each cell's data.
	</option>

	<option type="object" name="exportOptions" default="{}">
		Select the data to be gathered from the DataTable for export. This includes options for which columns, rows, ordering and search. Please see the `b-api buttons.exportData()` method for full details - the object given by this parameter is passed directly into that action to gather the required data.
	</option>

	<option type="boolean" name="header" default="true">
		Indicate if the table header should be included in the exported data or not.
	</option>

	<option type="boolean" name="footer" default="false">
		Indicate if the table footer should be included in the exported data or not.
	</option>

	<option type="string" name="title" default="*">
		File name to give the created file (plus the extension defined by the `extension` option). The special character `*` is automatically replaced with the value read from the host document's `-tag title` tag.
	</option>

	<option type="string" name="extension" default=".xlsx">
		The extension to give the created file name.
	</option>


	<example title="DataTables initialisation: Use the Flash Excel button"><![CDATA[

$('#myTable').DataTable( {
	buttons: [
		'excelFlash'
	]
} );

]]></example>

	<example title="DataTables initialisation: Use the `b-button excel` button type to automatically select between the Flash and HTML button options."><![CDATA[

$('#myTable').DataTable( {
	buttons: [
		'excel'
	]
} );

]]></example>

	<example title="DataTables initialisation: Use the `exportOptions` to save only the data shown on the current DataTable page"><![CDATA[

$('#myTable').DataTable( {
	buttons: [
		{
			extend: 'excelFlash',
			text: 'Save current page',
			exportOptions: {
				modifier: {
					page: 'current'
				}
			}
		}
	]
} );

]]></example>
</dt-button>